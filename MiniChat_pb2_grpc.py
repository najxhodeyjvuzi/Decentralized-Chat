# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MiniChat_pb2 as MiniChat__pb2


class RoutingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Find = channel.unary_unary(
                '/Routing/Find',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.userLogin = channel.unary_unary(
                '/Routing/userLogin',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.userLogout = channel.unary_unary(
                '/Routing/userLogout',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.joinRoom = channel.unary_unary(
                '/Routing/joinRoom',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.leaveRoom = channel.unary_unary(
                '/Routing/leaveRoom',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )


class RoutingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userLogout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def joinRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leaveRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoutingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'userLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.userLogin,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'userLogout': grpc.unary_unary_rpc_method_handler(
                    servicer.userLogout,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'joinRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.joinRoom,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'leaveRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.leaveRoom,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Routing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Routing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routing/Find',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routing/userLogin',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userLogout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routing/userLogout',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def joinRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routing/joinRoom',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def leaveRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routing/leaveRoom',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class chatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_room = channel.unary_unary(
                '/chat/send_room',
                request_serializer=MiniChat__pb2.chatMessage.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.apply_for_room_history = channel.unary_unary(
                '/chat/apply_for_room_history',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.chatMessage.FromString,
                )
        self.request_room_version = channel.unary_unary(
                '/chat/request_room_version',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.versionMessage.FromString,
                )
        self.send_personal = channel.unary_unary(
                '/chat/send_personal',
                request_serializer=MiniChat__pb2.chatMessage.SerializeToString,
                response_deserializer=MiniChat__pb2.Reply.FromString,
                )
        self.apply_for_personal_history = channel.unary_unary(
                '/chat/apply_for_personal_history',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.chatMessage.FromString,
                )
        self.request_personal_version = channel.unary_unary(
                '/chat/request_personal_version',
                request_serializer=MiniChat__pb2.Object.SerializeToString,
                response_deserializer=MiniChat__pb2.versionMessage.FromString,
                )


class chatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_room(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apply_for_room_history(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_room_version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_personal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apply_for_personal_history(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_personal_version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_chatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_room': grpc.unary_unary_rpc_method_handler(
                    servicer.send_room,
                    request_deserializer=MiniChat__pb2.chatMessage.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'apply_for_room_history': grpc.unary_unary_rpc_method_handler(
                    servicer.apply_for_room_history,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.chatMessage.SerializeToString,
            ),
            'request_room_version': grpc.unary_unary_rpc_method_handler(
                    servicer.request_room_version,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.versionMessage.SerializeToString,
            ),
            'send_personal': grpc.unary_unary_rpc_method_handler(
                    servicer.send_personal,
                    request_deserializer=MiniChat__pb2.chatMessage.FromString,
                    response_serializer=MiniChat__pb2.Reply.SerializeToString,
            ),
            'apply_for_personal_history': grpc.unary_unary_rpc_method_handler(
                    servicer.apply_for_personal_history,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.chatMessage.SerializeToString,
            ),
            'request_personal_version': grpc.unary_unary_rpc_method_handler(
                    servicer.request_personal_version,
                    request_deserializer=MiniChat__pb2.Object.FromString,
                    response_serializer=MiniChat__pb2.versionMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class chat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_room(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/send_room',
            MiniChat__pb2.chatMessage.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apply_for_room_history(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/apply_for_room_history',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.chatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_room_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/request_room_version',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.versionMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_personal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/send_personal',
            MiniChat__pb2.chatMessage.SerializeToString,
            MiniChat__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apply_for_personal_history(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/apply_for_personal_history',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.chatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def request_personal_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat/request_personal_version',
            MiniChat__pb2.Object.SerializeToString,
            MiniChat__pb2.versionMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
